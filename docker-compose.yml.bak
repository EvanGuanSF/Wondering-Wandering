version: '2'
services:
  # Our Node.js with Express webserver.
  server:
    container_name: server-container
    hostname: server
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
    mem_limit: 100m
    # Do not expose ports; we rely on nginx to proxy traffic to
    # this container from within the container network.
    # ports:
    depends_on:
      - redis-server
    volumes:
      # Map our spp folder in to the container's server folder.
      - ./server:/usr/src/server
      - /server/node_modules
    networks:
      - wondering-wandering
    command: >
      /bin/bash -c "
      npm install -g node-gyp
      && npm install
      && npm start"
      
  app:
    container_name: app-container
    hostname: app
    restart: always
    build:
      context: ./app
      dockerfile: Dockerfile
    mem_limit: 500m
    # Do not expose ports; we rely on nginx to proxy traffic to
    # this container from within the container network.
    # ports:
    volumes:
      # Map our spp folder in to the container's server folder.
      - ./app:/usr/src/app
      - /app/node_modules
    networks:
      - wondering-wandering
    command: >
      /bin/bash -c "
      npm install
      && npm run build
      && npm install -g serve
      && serve -s build -l 80"

  # Our Nginx reverse proxy.
  nginx:
    container_name: nginx-container
    image: nginx
    hostname: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    mem_limit: 200m
    ports:
      - '80:80'
      - '443:443'
    # Wait for the app to finish starting up before setting up the proxy.
    depends_on:
      - app
    # Nginx does not support .env environment variable substituation by default,
    # so we must generate our own .conf files.
    environment:
      # For these variables, see the ./.env file for more details.
      - NGINX_DOMAINS_OR_IP_ADDRESSES=${NGINX_DOMAINS_OR_IP_ADDRESSES}
      - NGINX_HTTP_PORT=${NGINX_HTTP_PORT}
      - NGINX_HTTPS_PORT=${NGINX_HTTPS_PORT}
      - NGINX_WEBROOT_PATH=${NGINX_WEBROOT_PATH}
      - NGINX_SSL_PARAMS_SNIPPET_PATH=${NGINX_SSL_PARAMS_SNIPPET_PATH}
      - NGINX_SSL_DHPARAM_PATH=${NGINX_SSL_DHPARAM_PATH}
      - CERTBOT_CERTIFICATES_PATH=${CERTBOT_CERTIFICATES_PATH}
      # Note that we need to do some trickery to replace '$' literals in the .conf files.
      # If you need to use a literal '$' in one of the upcoming files, you must replace it with ${DOLLAR}
      # Docker-compose treats '$' as a special character, so it must be escaped via '$$'.
      - DOLLAR=$$
      # Move the keys we copied over from the Dockerfile to their final destination.
      # envsubst will generate proper .conf files for us from the templates and the .env file.
      # Then, we test and start up nginx.
      # Finally, we start a loop to check for renewed ssl cert+key every 12 hours.
    command: > 
      /bin/bash -c "
      envsubst < /etc/nginx/conf.d/nginxconf.conf_template >| /etc/nginx/conf.d/nginx.conf
      && envsubst < /etc/nginx/conf.d/snippets/ssl-params.conf_template >| /etc/nginx/conf.d/snippets/ssl-params.conf
      && nginx -t && exec nginx -g 'daemon off;'"
    volumes:
      # Map our conf files to the nginx configurations folder.
      - ./nginx/conf:/etc/nginx/conf.d
      # The following will allow nginx to answer certbot authentication challenges.
      - web-root:${NGINX_WEBROOT_PATH}
      # Our bound ssl credentials folder.
      - ./ssl_creds:/ssl_creds
    networks:
      - wondering-wandering

  # Our memcache redis server.
  redis-server:
    container_name: redis-server-container
    image: redis
    hostname: redis-server
    build:
      context: ./redis-server
      dockerfile: Dockerfile
    mem_limit: 200m
    networks:
      - wondering-wandering

  # Our Certbot container.
  certbot:
    container_name: certbot-container
    image: certbot/certbot
    build:
      context: .
      dockerfile: ./certbot/Dockerfile
      args:
        - CERTBOT_YOUR_PRIMARY_SITE_DOMAIN=${CERTBOT_YOUR_PRIMARY_SITE_DOMAIN}
    mem_limit: 100m
    # Have this container listen to port 6379 internally.
    volumes:
      # The following will allow for nginx to pass on certbot authentication challenges.
      - web-root:${NGINX_WEBROOT_PATH}
      # Our bound ssl credentials folder.
      - ./ssl_creds:/ssl_creds
    depends_on:
      - nginx
    # This command gets a certificate for the site when the container is started.
    # Create a new set of certificate and key. (If valid certbot certs exist, keep them.)
    # Add '--expand' after 'certonly' if you need to add a domain to your existing certbot cert.
    command: certonly --webroot --webroot-path=${NGINX_WEBROOT_PATH} \
      --email ${CERTBOT_REGISTRATION_EMAIL} --agree-tos --no-eff-email ${CERTBOT_YOUR_SITE_DOMAINS}
    # Trap certbot's default exit call so the container does not automatically exit.
    # The while loop keeps the container from closing,
    # allowing crontab to run in the background and update certificates for us via certbot renew.
    entrypoint: "/bin/sh -c 'trap exit TERM; /bin/cp -rf /etc/letsencrypt/live/${CERTBOT_YOUR_PRIMARY_SITE_DOMAIN}/* /ssl_creds; while :; do echo $$(date -u): certbot: zzz...; sleep 30m & wait $${!}; done'"
    networks:
      - wondering-wandering

volumes:
  web-root:
    driver: local
    driver_opts:
      type: none
      device: ${MAIN_FOLDER_PATH}
      o: bind

# Create a network so that these containers can talk to each other.
networks:
  wondering-wandering:
    driver: bridge
